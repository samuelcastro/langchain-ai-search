[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "ChatOpenAI",
        "importPath": "langchain_openai",
        "description": "langchain_openai",
        "isExtraImport": true,
        "detail": "langchain_openai",
        "documentation": {}
    },
    {
        "label": "ChatOpenAI",
        "importPath": "langchain_openai",
        "description": "langchain_openai",
        "isExtraImport": true,
        "detail": "langchain_openai",
        "documentation": {}
    },
    {
        "label": "PromptTemplate",
        "importPath": "langchain_core.prompts",
        "description": "langchain_core.prompts",
        "isExtraImport": true,
        "detail": "langchain_core.prompts",
        "documentation": {}
    },
    {
        "label": "PromptTemplate",
        "importPath": "langchain_core.prompts",
        "description": "langchain_core.prompts",
        "isExtraImport": true,
        "detail": "langchain_core.prompts",
        "documentation": {}
    },
    {
        "label": "Tool",
        "importPath": "langchain_core.tools",
        "description": "langchain_core.tools",
        "isExtraImport": true,
        "detail": "langchain_core.tools",
        "documentation": {}
    },
    {
        "label": "create_react_agent",
        "importPath": "langchain.agents",
        "description": "langchain.agents",
        "isExtraImport": true,
        "detail": "langchain.agents",
        "documentation": {}
    },
    {
        "label": "AgentExecutor",
        "importPath": "langchain.agents",
        "description": "langchain.agents",
        "isExtraImport": true,
        "detail": "langchain.agents",
        "documentation": {}
    },
    {
        "label": "hub",
        "importPath": "langchain",
        "description": "langchain",
        "isExtraImport": true,
        "detail": "langchain",
        "documentation": {}
    },
    {
        "label": "get_profile_url_tavily",
        "importPath": "tools.tools",
        "description": "tools.tools",
        "isExtraImport": true,
        "detail": "tools.tools",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "TavilySearchResults",
        "importPath": "langchain_community.tools.tavily_search",
        "description": "langchain_community.tools.tavily_search",
        "isExtraImport": true,
        "detail": "langchain_community.tools.tavily_search",
        "documentation": {}
    },
    {
        "label": "StrOutputParser",
        "importPath": "langchain_core.output_parsers",
        "description": "langchain_core.output_parsers",
        "isExtraImport": true,
        "detail": "langchain_core.output_parsers",
        "documentation": {}
    },
    {
        "label": "scrape_linkedin_profile",
        "importPath": "third_parties.linkedin",
        "description": "third_parties.linkedin",
        "isExtraImport": true,
        "detail": "third_parties.linkedin",
        "documentation": {}
    },
    {
        "label": "lookup",
        "importPath": "agents.linkedin_lookup_agent",
        "description": "agents.linkedin_lookup_agent",
        "isExtraImport": true,
        "detail": "agents.linkedin_lookup_agent",
        "documentation": {}
    },
    {
        "label": "lookup",
        "importPath": "agents.linkedin_lookup_agent",
        "description": "agents.linkedin_lookup_agent",
        "isExtraImport": true,
        "detail": "agents.linkedin_lookup_agent",
        "documentation": {}
    },
    {
        "label": "lookup",
        "kind": 2,
        "importPath": "agents.linkedin_lookup_agent",
        "description": "agents.linkedin_lookup_agent",
        "peekOfCode": "def lookup(name: str) -> str:\n    llm = ChatOpenAI(\n        temperature=0,  # 0 because we don't want any creative answers, we just need the results from the search\n        model=\"gpt-4o-mini\",\n    )\n    template = \"\"\"\n        Given the full name {name_of_person} I want you to find their LinkedIn profile URL. \n        Your final answer should only be a URL.\n    \"\"\"\n    # Creating the prompt template to be used by the agent",
        "detail": "agents.linkedin_lookup_agent",
        "documentation": {}
    },
    {
        "label": "scrape_linkedin_profile",
        "kind": 2,
        "importPath": "third_parties.linkedin",
        "description": "third_parties.linkedin",
        "peekOfCode": "def scrape_linkedin_profile(linkedin_profile_url: str, mock: bool = False):\n    \"\"\"scrape information from LinkedIn profiles,\n    Manually scrape the information from the LinkedIn profile\n    \"\"\"\n    if mock:\n        linkedin_profile_url = \"https://gist.githubusercontent.com/samuelcastro/afafea0032854ab53d647edc05683435/raw/3bcb3cf3cfeb52baa0f7e3e2e3ecae47a2790b55/sam-silva-data.json\"\n        response = requests.get(linkedin_profile_url, timeout=10)\n    else:\n        api_endpoint = \"https://api.scrapin.io/enrichment/profile\"\n        params = {",
        "detail": "third_parties.linkedin",
        "documentation": {}
    },
    {
        "label": "get_profile_url_tavily",
        "kind": 2,
        "importPath": "tools.tools",
        "description": "tools.tools",
        "peekOfCode": "def get_profile_url_tavily(name: str) -> str:\n    \"\"\"Searches for LinkedIn or TWitter Profile Page.\"\"\"\n    search = TavilySearchResults()\n    res = search.run(f\"{name}\")\n    # we don't need to parse the response, because the LLM will return the URL for us.\n    return res",
        "detail": "tools.tools",
        "documentation": {}
    },
    {
        "label": "ice_breaker_with",
        "kind": 2,
        "importPath": "ice_breaker",
        "description": "ice_breaker",
        "peekOfCode": "def ice_breaker_with(name: str) -> str:\n    linkedin_url = linkedin_lookup_agent(name=name)\n    linkedin_data = scrape_linkedin_profile(linkedin_profile_url=linkedin_url)\n    summary_template = \"\"\"\n        Given the information {information} about a person from I want you to create:\n        1. a short summary\n        2. two interesting facts about them\n    \"\"\"\n    summary_prompt = PromptTemplate(\n        input_variables=[\"information\"], template=summary_template",
        "detail": "ice_breaker",
        "documentation": {}
    }
]